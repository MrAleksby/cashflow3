#!/usr/bin/env python3
"""
–¢—É—Ä–Ω–∏—Ä–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Cashflow
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Python –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è WebSocket
"""

import asyncio
import websockets
import json
import time
import logging
from datetime import datetime
from http.server import HTTPServer, SimpleHTTPRequestHandler
import threading
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TournamentServer:
    def __init__(self):
        self.players = {}  # ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ -> –¥–∞–Ω–Ω—ã–µ
        self.spectators = set()  # ID –∑—Ä–∏—Ç–µ–ª–µ–π
        self.tournament_start_time = None
        self.is_active = False
        
    def add_player(self, player_id, player_data):
        """–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        self.players[player_id] = {
            **player_data,
            'id': player_id,
            'last_update': time.time(),
            'is_online': True
        }
        logger.info(f"üéÆ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {player_data.get('name', 'Unknown')}")
        
    def update_player(self, player_id, data):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if player_id in self.players:
            old_data = self.players[player_id].copy()
            self.players[player_id].update(data)
            self.players[player_id]['last_update'] = time.time()
            self.players[player_id]['is_online'] = True
            
            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {self.players[player_id].get('name', 'Unknown')}: ${data.get('cash', 0)}")
            return old_data
        return None
        
    def remove_player(self, player_id):
        """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if player_id in self.players:
            player_name = self.players[player_id].get('name', 'Unknown')
            del self.players[player_id]
            logger.info(f"üëã –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {player_name}")
            
    def get_tournament_state(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
        return {
            'players': list(self.players.values()),
            'is_active': self.is_active,
            'start_time': self.tournament_start_time,
            'total_players': len(self.players),
            'online_players': len([p for p in self.players.values() if p.get('is_online', False)])
        }
        
    def start_tournament(self):
        """–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        self.is_active = True
        self.tournament_start_time = time.time()
        logger.info("üèÅ –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!")
        
    def stop_tournament(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        self.is_active = False
        duration = time.time() - self.tournament_start_time if self.tournament_start_time else 0
        logger.info(f"üèÅ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫")

class TournamentWebSocketHandler:
    def __init__(self, tournament):
        self.tournament = tournament
        self.clients = {}  # websocket -> client_info
        
    async def handle_client(self, websocket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        client_id = id(websocket)
        client_type = None
        
        try:
            async for message in websocket:
                try:
                    data = json.loads(message)
                    await self.process_message(websocket, client_id, data)
                except json.JSONDecodeError:
                    logger.error(f"–û—à–∏–±–∫–∞ JSON: {message}")
                    
        except websockets.exceptions.ConnectionClosed:
            pass
        finally:
            await self.handle_disconnect(websocket, client_id)
            
    async def process_message(self, websocket, client_id, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        message_type = data.get('type')
        
        if message_type == 'join_tournament':
            # –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É
            client_type = 'player'
            player_data = data.get('data', {})
            self.tournament.add_player(client_id, player_data)
            self.clients[websocket] = {'type': 'player', 'id': client_id}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await websocket.send(json.dumps({
                'type': 'tournament_state',
                'data': self.tournament.get_tournament_state()
            }))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
            await self.broadcast_to_spectators({
                'type': 'player_joined',
                'data': {**player_data, 'id': client_id}
            })
            
        elif message_type == 'join_spectator':
            # –ó—Ä–∏—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
            client_type = 'spectator'
            self.tournament.spectators.add(client_id)
            self.clients[websocket] = {'type': 'spectator', 'id': client_id}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
            await websocket.send(json.dumps({
                'type': 'tournament_state',
                'data': self.tournament.get_tournament_state()
            }))
            
        elif message_type == 'player_update':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if websocket in self.clients and self.clients[websocket]['type'] == 'player':
                player_id = self.clients[websocket]['id']
                old_data = self.tournament.update_player(player_id, data.get('data', {}))
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑—Ä–∏—Ç–µ–ª–µ–π
                if old_data:
                    await self.broadcast_to_spectators({
                        'type': 'player_updated',
                        'data': {
                            'player_id': player_id,
                            'player_name': self.tournament.players[player_id].get('name', 'Unknown'),
                            'old_data': old_data,
                            'new_data': data.get('data', {})
                        }
                    })
                    
        elif message_type == 'player_action':
            # –î–µ–π—Å—Ç–≤–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if websocket in self.clients and self.clients[websocket]['type'] == 'player':
                player_id = self.clients[websocket]['id']
                player_name = self.tournament.players[player_id].get('name', 'Unknown')
                
                await self.broadcast_to_spectators({
                    'type': 'player_action',
                    'data': {
                        'player_id': player_id,
                        'player_name': player_name,
                        'action': data.get('data', {})
                    }
                })
                
        elif message_type == 'start_tournament':
            # –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
            self.tournament.start_tournament()
            await self.broadcast_to_all({
                'type': 'tournament_started',
                'data': {'start_time': self.tournament.tournament_start_time}
            })
            
        elif message_type == 'stop_tournament':
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
            self.tournament.stop_tournament()
            await self.broadcast_to_all({
                'type': 'tournament_stopped',
                'data': {'end_time': time.time()}
            })
            
    async def handle_disconnect(self, websocket, client_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if websocket in self.clients:
            client_info = self.clients[websocket]
            
            if client_info['type'] == 'player':
                # –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è
                self.tournament.remove_player(client_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑—Ä–∏—Ç–µ–ª–µ–π
                await self.broadcast_to_spectators({
                    'type': 'player_disconnected',
                    'data': {'player_id': client_id}
                })
                
            elif client_info['type'] == 'spectator':
                # –ó—Ä–∏—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è
                self.tournament.spectators.discard(client_id)
                
            del self.clients[websocket]
            
    async def broadcast_to_spectators(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑—Ä–∏—Ç–µ–ª—è–º"""
        if not self.tournament.spectators:
            return
            
        message_str = json.dumps(message)
        for websocket, client_info in self.clients.items():
            if client_info['type'] == 'spectator':
                try:
                    await websocket.send(message_str)
                except websockets.exceptions.ConnectionClosed:
                    pass
                    
    async def broadcast_to_all(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        message_str = json.dumps(message)
        for websocket in self.clients.keys():
            try:
                await websocket.send(message_str)
            except websockets.exceptions.ConnectionClosed:
                pass

class CustomHTTPRequestHandler(SimpleHTTPRequestHandler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CORS –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
        
    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_response(200)
        self.end_headers()
        
    def translate_path(self, path):
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –∑—Ä–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if path == '/spectator':
            return 'spectator/index.html'
        elif path == '/spectator/':
            return 'spectator/index.html'
        return super().translate_path(path)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    tournament = TournamentServer()
    handler = TournamentWebSocketHandler(tournament)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
    ws_server = await websockets.serve(
        handler.handle_client,
        "0.0.0.0",  # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
        8765,
        ping_interval=20,
        ping_timeout=10
    )
    
    logger.info("üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://0.0.0.0:8765")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_http_server():
        httpd = HTTPServer(('0.0.0.0', 3000), CustomHTTPRequestHandler)  # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
        logger.info("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:3000")
        logger.info("üì± –£—á–∞—Å—Ç–Ω–∏–∫–∏: http://0.0.0.0:3000?tournament=true")
        logger.info("üëÅÔ∏è –ó—Ä–∏—Ç–µ–ª–∏: http://0.0.0.0:3000/spectator")
        httpd.serve_forever()
    
    http_thread = threading.Thread(target=run_http_server, daemon=True)
    http_thread.start()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await ws_server.wait_closed()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
