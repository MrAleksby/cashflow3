#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Cashflow
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ HTTP –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
"""

import json
import time
import logging
from http.server import HTTPServer, SimpleHTTPRequestHandler
import threading
from urllib.parse import parse_qs, urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TournamentServer:
    def __init__(self):
        self.players = {}  # ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ -> –¥–∞–Ω–Ω—ã–µ
        self.tournament_start_time = None
        self.is_active = False
        
    def add_player(self, player_id, player_data):
        """–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        self.players[player_id] = {
            **player_data,
            'id': player_id,
            'last_update': time.time(),
            'is_online': True
        }
        logger.info(f"üéÆ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {player_data.get('name', 'Unknown')}")
        
    def update_player(self, player_id, data):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if player_id in self.players:
            old_data = self.players[player_id].copy()
            self.players[player_id].update(data)
            self.players[player_id]['last_update'] = time.time()
            self.players[player_id]['is_online'] = True
            
            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {self.players[player_id].get('name', 'Unknown')}: ${data.get('cash', 0)}")
            return old_data
        return None
        
    def remove_player(self, player_id):
        """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if player_id in self.players:
            player_name = self.players[player_id].get('name', 'Unknown')
            del self.players[player_id]
            logger.info(f"üëã –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {player_name}")
            
    def cleanup_inactive_players(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)"""
        current_time = time.time()
        inactive_players = []
        
        for player_id, player in list(self.players.items()):
            if current_time - player.get('last_update', 0) > 300:  # 5 –º–∏–Ω—É—Ç
                inactive_players.append(player_id)
                
        for player_id in inactive_players:
            self.remove_player(player_id)
            
        if inactive_players:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(inactive_players)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
    def get_tournament_state(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω (–æ–±–Ω–æ–≤–ª—è–ª—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥)
        current_time = time.time()
        online_count = 0
        
        for player in self.players.values():
            time_since_update = current_time - player.get('last_update', 0)
            if time_since_update <= 30:  # 30 —Å–µ–∫—É–Ω–¥
                player['is_online'] = True
                online_count += 1
            else:
                player['is_online'] = False
        
        return {
            'players': list(self.players.values()),
            'is_active': self.is_active,
            'start_time': self.tournament_start_time,
            'total_players': len(self.players),
            'online_players': online_count
        }
        
    def start_tournament(self):
        """–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        self.is_active = True
        self.tournament_start_time = time.time()
        logger.info("üèÅ –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!")
        
    def stop_tournament(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        self.is_active = False
        duration = time.time() - self.tournament_start_time if self.tournament_start_time else 0
        logger.info(f"üèÅ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫")

class CustomHTTPRequestHandler(SimpleHTTPRequestHandler):
    def __init__(self, *args, tournament=None, **kwargs):
        self.tournament = tournament
        super().__init__(*args, **kwargs)
    
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
        
    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_response(200)
        self.end_headers()
        
    def do_GET(self):
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        query_params = parse_qs(parsed_url.query)
        
        if path == '/spectator':
            # –ó—Ä–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            with open('spectator/index.html', 'rb') as f:
                self.wfile.write(f.read())
                
        elif path == '/admin':
            # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            with open('admin/index.html', 'rb') as f:
                self.wfile.write(f.read())
                
        elif path == '/api/tournament/state':
            # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            state = self.tournament.get_tournament_state()
            self.wfile.write(json.dumps(state, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/tournament/start':
            # API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            self.tournament.start_tournament()
            response = {'status': 'success', 'message': '–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!'}
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/tournament/stop':
            # API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            self.tournament.stop_tournament()
            response = {'status': 'success', 'message': '–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!'}
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/player/join':
            # API –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            player_name = query_params.get('name', ['–£—á–∞—Å—Ç–Ω–∏–∫'])[0]
            player_id = f"player_{int(time.time() * 1000)}"
            
            player_data = {
                'name': player_name,
                'cash': 0,
                'assets': [],
                'income': [],
                'expenses': [],
                'monthsCount': 0
            }
            
            self.tournament.add_player(player_id, player_data)
            
            response = {
                'status': 'success',
                'player_id': player_id,
                'message': f'–£—á–∞—Å—Ç–Ω–∏–∫ {player_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É'
            }
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/player/update':
            # API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            player_id = query_params.get('player_id', [''])[0]
            if player_id and player_id in self.tournament.players:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                cash = int(query_params.get('cash', [0])[0])
                assets_count = int(query_params.get('assets_count', [0])[0])
                months_count = int(query_params.get('months_count', [0])[0])
                
                update_data = {
                    'cash': cash,
                    'assets': [{'name': f'–ê–∫—Ç–∏–≤ {i+1}'} for i in range(assets_count)],
                    'monthsCount': months_count
                }
                
                self.tournament.update_player(player_id, update_data)
                response = {'status': 'success', 'message': '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'}
            else:
                response = {'status': 'error', 'message': '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        else:
            # –û–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            super().do_GET()
            
    def translate_path(self, path):
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –∑—Ä–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if path == '/spectator':
            return 'spectator/index.html'
        elif path == '/spectator/':
            return 'spectator/index.html'
        elif path == '/admin':
            return 'admin/index.html'
        elif path == '/admin/':
            return 'admin/index.html'
        return super().translate_path(path)

def run_http_server(tournament):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    class Handler(CustomHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, tournament=tournament, **kwargs)
    
    httpd = HTTPServer(('0.0.0.0', 3000), Handler)
    logger.info("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:3000")
    logger.info("üì± –£—á–∞—Å—Ç–Ω–∏–∫–∏: http://0.0.0.0:3000?tournament=true")
    logger.info("üëÅÔ∏è –ó—Ä–∏—Ç–µ–ª–∏: http://0.0.0.0:3000/spectator")
    logger.info("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://0.0.0.0:3000/admin")
    logger.info("üöÄ API: http://0.0.0.0:3000/api/tournament/state")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    def cleanup_task():
        while True:
            time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            tournament.cleanup_inactive_players()
    
    cleanup_thread = threading.Thread(target=cleanup_task, daemon=True)
    cleanup_thread.start()
    
    httpd.serve_forever()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    tournament = TournamentServer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    run_http_server(tournament)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
