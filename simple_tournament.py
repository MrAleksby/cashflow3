#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Cashflow
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ HTTP –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
"""

import json
import time
import logging
from http.server import HTTPServer, SimpleHTTPRequestHandler
import threading
from urllib.parse import parse_qs, urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TournamentServer:
    def __init__(self):
        self.players = {}  # ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ -> –¥–∞–Ω–Ω—ã–µ
        self.spectators = {}  # IP –∑—Ä–∏—Ç–µ–ª—è -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.tournament_start_time = None
        self.is_active = False
        self.is_paused = False
        self.pause_start_time = None
        
    def add_player(self, player_id, player_data):
        """–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        self.players[player_id] = {
            **player_data,
            'id': player_id,
            'last_update': time.time(),
            'is_online': True
        }
        logger.info(f"üéÆ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {player_data.get('name', 'Unknown')}")
        
    def update_player(self, player_id, data):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if player_id in self.players:
            old_data = self.players[player_id].copy()
            self.players[player_id].update(data)
            self.players[player_id]['last_update'] = time.time()
            self.players[player_id]['is_online'] = True
            
            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {self.players[player_id].get('name', 'Unknown')}: ${data.get('cash', 0)}")
            return old_data
        return None
        
    def remove_player(self, player_id):
        """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if player_id in self.players:
            player_name = self.players[player_id].get('name', 'Unknown')
            del self.players[player_id]
            logger.info(f"üëã –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {player_name}")
            
    def add_spectator(self, ip_address):
        """–î–æ–±–∞–≤–∏—Ç—å –∑—Ä–∏—Ç–µ–ª—è"""
        self.spectators[ip_address] = time.time()
        logger.info(f"üëÄ –î–æ–±–∞–≤–ª–µ–Ω –∑—Ä–∏—Ç–µ–ª—å: {ip_address} (–≤—Å–µ–≥–æ: {len(self.spectators)})")
        
    def remove_spectator(self, ip_address):
        """–£–¥–∞–ª–∏—Ç—å –∑—Ä–∏—Ç–µ–ª—è"""
        if ip_address in self.spectators:
            del self.spectators[ip_address]
            
    def cleanup_inactive_spectators(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑—Ä–∏—Ç–µ–ª–µ–π (–Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç)"""
        current_time = time.time()
        inactive_spectators = []
        
        for ip_address, last_view in list(self.spectators.items()):
            if current_time - last_view > 120:  # 2 –º–∏–Ω—É—Ç—ã
                inactive_spectators.append(ip_address)
                
        for ip_address in inactive_spectators:
            self.remove_spectator(ip_address)
            
        if inactive_spectators:
            logger.info(f"üëÄ –£–¥–∞–ª–µ–Ω–æ {len(inactive_spectators)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑—Ä–∏—Ç–µ–ª–µ–π")
            
    def cleanup_inactive_players(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)"""
        current_time = time.time()
        inactive_players = []
        
        for player_id, player in list(self.players.items()):
            if current_time - player.get('last_update', 0) > 300:  # 5 –º–∏–Ω—É—Ç
                inactive_players.append(player_id)
                
        for player_id in inactive_players:
            self.remove_player(player_id)
            
        if inactive_players:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(inactive_players)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
    def get_tournament_state(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω (–æ–±–Ω–æ–≤–ª—è–ª—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥)
        current_time = time.time()
        online_count = 0
        
        for player in self.players.values():
            time_since_update = current_time - player.get('last_update', 0)
            if time_since_update <= 30:  # 30 —Å–µ–∫—É–Ω–¥
                player['is_online'] = True
                online_count += 1
            else:
                player['is_online'] = False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑—Ä–∏—Ç–µ–ª–µ–π (–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã)
        active_spectators = 0
        for last_view in self.spectators.values():
            if current_time - last_view <= 120:  # 2 –º–∏–Ω—É—Ç—ã
                active_spectators += 1
        
        return {
            'players': list(self.players.values()),
            'is_active': self.is_active,
            'is_paused': self.is_paused,
            'start_time': self.tournament_start_time,
            'total_players': len(self.players),
            'online_players': online_count,
            'online_spectators': active_spectators
        }
        
    def start_tournament(self):
        """–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        self.is_active = True
        self.is_paused = False
        self.tournament_start_time = time.time()
        self.pause_start_time = None
        logger.info("üèÅ –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!")
        
    def pause_tournament(self):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –Ω–∞ –ø–∞—É–∑—É"""
        if self.is_active and not self.is_paused:
            self.is_paused = True
            self.pause_start_time = time.time()
            logger.info("‚è∏Ô∏è –¢—É—Ä–Ω–∏—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É!")
            
    def resume_tournament(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        if self.is_active and self.is_paused:
            self.is_paused = False
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
            if self.pause_start_time:
                pause_duration = time.time() - self.pause_start_time
                self.tournament_start_time += pause_duration
            self.pause_start_time = None
            logger.info("‚ñ∂Ô∏è –¢—É—Ä–Ω–∏—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω!")
        
    def stop_tournament(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        duration = 0
        if self.tournament_start_time:
            duration = time.time() - self.tournament_start_time
        self.is_active = False
        self.is_paused = False
        self.tournament_start_time = None
        self.pause_start_time = None
        logger.info(f"üèÅ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫")

class CustomHTTPRequestHandler(SimpleHTTPRequestHandler):
    def __init__(self, *args, tournament=None, **kwargs):
        self.tournament = tournament
        super().__init__(*args, **kwargs)
    
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
        
    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_response(200)
        self.end_headers()
        
    def do_GET(self):
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        query_params = parse_qs(parsed_url.query)
        
        if path == '/spectator':
            # –ó—Ä–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            with open('spectator/index.html', 'rb') as f:
                self.wfile.write(f.read())
                
        elif path == '/admin':
            # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            with open('admin/index.html', 'rb') as f:
                self.wfile.write(f.read())
                
        elif path == '/api/tournament/state':
            # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑—Ä–∏—Ç–µ–ª—è
            client_ip = self.client_address[0]
            self.tournament.add_spectator(client_ip)
            logger.info(f"üëÄ –ó—Ä–∏—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {client_ip}")
            
            state = self.tournament.get_tournament_state()
            self.wfile.write(json.dumps(state, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/tournament/start':
            # API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            self.tournament.start_tournament()
            response = {'status': 'success', 'message': '–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!'}
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/tournament/stop':
            # API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            self.tournament.stop_tournament()
            response = {'status': 'success', 'message': '–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!'}
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

        elif path == '/api/tournament/pause':
            # API –¥–ª—è –ø–∞—É–∑—ã —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            self.tournament.pause_tournament()
            response = {'status': 'success', 'message': '–¢—É—Ä–Ω–∏—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É!'}
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

        elif path == '/api/tournament/resume':
            # API –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            self.tournament.resume_tournament()
            response = {'status': 'success', 'message': '–¢—É—Ä–Ω–∏—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω!'}
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/player/join':
            # API –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            player_name = query_params.get('name', ['–£—á–∞—Å—Ç–Ω–∏–∫'])[0]
            player_id = f"player_{int(time.time() * 1000)}"
            
            player_data = {
                'name': player_name,
                'cash': 0,
                'assets': [],
                'income': [],
                'expenses': [],
                'monthsCount': 0
            }
            
            self.tournament.add_player(player_id, player_data)
            
            response = {
                'status': 'success',
                'player_id': player_id,
                'message': f'–£—á–∞—Å—Ç–Ω–∏–∫ {player_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É'
            }
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

        elif path == '/api/test/add-players':
            # API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            count = int(query_params.get('count', ['3'])[0])
            added_count = 0
            
            for i in range(count):
                if len(self.tournament.players) >= 20:  # –ú–∞–∫—Å–∏–º—É–º 20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    break
                    
                player_id = f"test_player_{int(time.time() * 1000) + i}"
                player_name = f"–¢–µ—Å—Ç {i + 1}"
                
                player_data = {
                    'name': player_name,
                    'cash': 100000 + (i * 10000),
                    'assets': [],
                    'income': [],
                    'expenses': [],
                    'monthsCount': i,
                    'salary': 5000 + (i * 1000),
                    'passive_income': 1000 + (i * 500),
                    'total_income': 6000 + (i * 1500),
                    'total_expenses': 2000 + (i * 300),
                    'flow': 4000 + (i * 1200)
                }
                
                self.tournament.add_player(player_id, player_data)
                added_count += 1
            
            response = {
                'status': 'success',
                'added_count': added_count,
                'total_players': len(self.tournament.players),
                'message': f'–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
            }
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        elif path == '/api/player/update':
            # API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            player_id = query_params.get('player_id', [''])[0]
            if player_id and player_id in self.tournament.players:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                cash = int(query_params.get('cash', [0])[0])
                assets_count = int(query_params.get('assets_count', [0])[0])
                months_count = int(query_params.get('months_count', [0])[0])
                
                # –ù–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                salary = int(query_params.get('salary', [0])[0])
                passive_income = int(query_params.get('passive_income', [0])[0])
                total_income = int(query_params.get('total_income', [0])[0])
                total_expenses = int(query_params.get('total_expenses', [0])[0])
                flow = int(query_params.get('flow', [0])[0])
                
                update_data = {
                    'cash': cash,
                    'assets': [{'name': f'–ê–∫—Ç–∏–≤ {i+1}'} for i in range(assets_count)],
                    'monthsCount': months_count,
                    'salary': salary,
                    'passive_income': passive_income,
                    'total_income': total_income,
                    'total_expenses': total_expenses,
                    'flow': flow
                }
                
                self.tournament.update_player(player_id, update_data)
                response = {'status': 'success', 'message': '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'}
            else:
                response = {'status': 'error', 'message': '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        else:
            # –û–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            super().do_GET()
            
    def translate_path(self, path):
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –∑—Ä–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if path == '/spectator':
            return 'spectator/index.html'
        elif path == '/spectator/':
            return 'spectator/index.html'
        elif path == '/admin':
            return 'admin/index.html'
        elif path == '/admin/':
            return 'admin/index.html'
        return super().translate_path(path)

def run_http_server(tournament):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    class Handler(CustomHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, tournament=tournament, **kwargs)
    
    httpd = HTTPServer(('0.0.0.0', 3000), Handler)
    logger.info("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:3000")
    logger.info("üì± –£—á–∞—Å—Ç–Ω–∏–∫–∏: http://0.0.0.0:3000?tournament=true")
    logger.info("üëÅÔ∏è –ó—Ä–∏—Ç–µ–ª–∏: http://0.0.0.0:3000/spectator")
    logger.info("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://0.0.0.0:3000/admin")
    logger.info("üöÄ API: http://0.0.0.0:3000/api/tournament/state")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∑—Ä–∏—Ç–µ–ª–µ–π
    def cleanup_task():
        while True:
            time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            tournament.cleanup_inactive_players()
            tournament.cleanup_inactive_spectators()
    
    cleanup_thread = threading.Thread(target=cleanup_task, daemon=True)
    cleanup_thread.start()
    
    httpd.serve_forever()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    tournament = TournamentServer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    run_http_server(tournament)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
